# Logging level
logging_level: "info"

filepaths:
  # Transport related data
  "transport_modes": "Transport/transport_modes.csv"
  "roads_edges": "Transport/roads_edges.geojson"
  "multimodal_edges": "Transport/multimodal_edges.geojson"
  "maritime_edges": "Transport/maritime_edges.geojson"
  "airways_edges": "Transport/airways_edges.geojson"
  "railways_edges": "Transport/railways_edges.geojson"
  "waterways_edges": "Transport/waterways_edges.geojson"
  "pipelines_edges": "Transport/pipelines_edges.geojson"
  # Economic data
  "sector_table": "Economic/sector_table.csv"
  "mrio": "Economic/mrio.csv"
  # Spatial data
  "households_spatial": "Spatial/households.geojson"
  "countries_spatial": "Spatial/countries.geojson"
  "firms_spatial": "Spatial/firms.geojson"
  # Optional
  "inventory_duration_targets": "Economic/inventory_targets.csv"
  "admin": "Spatial/admin.geojson"



admin: None

with_transport: True

# duration of simulation
t_final: 10  # in time_resolution unit

# Whether to export files
export_files: False


# Logistic parameters
logistics:
  shipment_methods_to_transport_modes:  # shipment methods that can be used for each transport mode
    solid_bulk: ["multimodal", 'roads', 'railways', 'maritime', 'waterways', 'airways']  # no solid bulk on pipeline
    liquid_bulk: ["multimodal", 'pipelines', 'roads', 'railways', 'maritime', 'waterways', 'airways']
    container: ["multimodal", 'roads', 'railways', 'maritime', 'waterways', 'airways']  # no container on pipelines
  sector_types_to_shipment_method:  # shipment method to use for each sector type
    agriculture: "solid_bulk"
    mining: "solid_bulk"
    oil_and_gas: "liquid_bulk"
    default: "container"
  speeds:  # km/hour
    roads:
      paved: 50
      unpaved: 15
    maritime: 35
    airways: 800
    railways: 50
    waterways: 7
    pipelines: 50
  basic_cost:  # per ton*km
    roads: 0.01
    maritime: 0.001
    airways: 1
    railways: 0.005
    waterways: 0.005
    pipelines: 0.0001
    multimodal: 0.01
  nb_cost_profiles: 1
  basic_cost_random: False  # deactivate all randomness
  switching_costs:
    modal_switch: 0.15  # Additional cost percentage when switching transport modes (e.g., rail to road)
    port_switch: 0.05
  basic_cost_variability: # coefficient of variation
    roads: 0.1
    maritime: 0.05
    airways: 0.01
    railways: 0.2
    waterways: 0.2
    pipelines: 0.01
    multimodal: 0.01
  dwell_times:  # hours
    roads-maritime: 12
    roads-railways: 12
    roads-maritime-dom: 12
    roads-airways: 12
    roads-waterways: 12
    railways-maritime: 24
    railways-waterways: 24
    waterways-maritime: 24
    roads-pipelines: 6
    railways-pipelines: 6
    pipelines-maritime: 6
  loading_fees: #USD/ton
    roads-maritime: 2.2
    roads-maritime-dom: 2.2
    roads-airways: 2.2
    roads-waterways: 2.2
    roads-railways: 2.2
    railways-maritime: 2.2
    railways-waterways: 2.2
    waterways-maritime: 2.2
    roads-pipelines: 1.0
    railways-pipelines: 1.0
    pipelines-maritime: 1.0
  border_crossing_fees: #USD/ton
    roads: 30
    maritime: 30
    railways: 30
    waterways: 30
    pipelines: 5
  border_crossing_times: #hours
    roads: 1.5
    maritime: 2
    multimodal: 2
    railways: 2
    waterways: 2
    pipelines: 0
  cost_of_time: 0.49 #USD/hour
  variability_coef: 0.44 #USD/hour
  variability: #as fraction of travel time
    roads:
      paved: 0.01
      unpaved: 0.075
    maritime: 0.005
    airways: 0.005
    waterways: 0.02
    railways: 0.02
    multimodal:
      roads-maritime: 0.1
      roads-airways: 0.1
      roads-waterways: 0.1
      roads-railways: 0.1
      railways-maritime: 0.1
      pipelines-maritime: 0.1
  name-specific:
    azerty: 0

# Dictionary of edges, identified by their name, for which we have data on their flow, in monetary terms
flow_data: {}

# Transport capacity overrides: edge_name -> capacity in tons per day
# These values will replace any capacity values from the GeoJSON files
transport_capacity_overrides: {}
  # Example entries:
  # "Highway 1 Segment A": 80000  # tons per day
  # "Port of Sihanoukville": 120000
  # "Main Railway Line": 45000

# Whether to cache route in a dictionary
use_route_cache: True

# List of transport modes to include
transport_modes: ['roads', "maritime"]

# Monetary units to use in model. 'USD', 'kUSD', 'mUSD'
monetary_units_in_model: "mUSD"

# Monetary units in input files. 'USD', 'kUSD', 'mUSD'
monetary_units_in_data: "mUSD"

# Define the type of input data to calibrate the model
# - 'mrio' use mrio matrix directly
# - 'supplier-buyer network' uses supplier buyer network data
firm_data_type: "mrio"


# Whether to model congestion
congestion: True

# Whether firms should readjust their price to changes in input prices
propagate_input_price_change: True

# Which sectors to include. Possible values:
# - 'all': all the sectors are kept
# - list of sectors
sectors_to_include: "all"

# Which sectors to specifically exclude.
# - None
# - list of sectors
sectors_to_exclude: None

# The products from those sectors do not need transport network to be transported
sectors_no_transport_network: ['utility', 'transport', 'trade', 'services', 'service', 'construction']

# Whether the B2C flows are transported on the transport network
transport_to_households: True

# Filter out sectors whose output is below that cutoff value
# - if 'type' is 'percentage', test cutoff against the sector's relative output
# - if 'type' is 'absolute', test cutoff against the sector's absolute output
# - if 'type' is 'relative_to_average', the cutoff is (cutoff value) * (country's total output) / (nb sectors)
cutoff_sector_output:
  'type': 'absolute'
  'value': 1.0
  'unit': 'mUSD'

# Filter out sectors whose final demand is below that cutoff value
# - if 'type' is 'percentage', test cutoff against the sector's relative output
# - if 'type' is 'absolute', test cutoff against the sector's absolute output, in yearly term
# - if 'type' is 'relative_to_average', the cutoff is set to (cutoff value) * (country's total demand) / (nb sectors)
cutoff_sector_demand:
  'type': 'absolute'
  'value': 1.0
  'unit': 'mUSD'

# Filter out sectors firms output is below that cutoff value
cutoff_firm_output:
  'type': 'absolute'
  'value': 10
  "unit": "kUSD"

# Filter out region_sector to households links if purchase is below that cutoff value
cutoff_household_demand:
  'type': 'absolute'  # only absolute works
  'value': 10
  "unit": "kUSD"

# How much firms of filtered sectors should at least be modeled
min_nb_firms_per_sector: 5

# How to combine the output and demand sector cutoffs
combine_sector_cutoff: "and"


# Population density cutoff, in capita / km2
# Adminunit below this cutoff are eliminated for demand od_point
# If set to 0, deactivate this filter
pop_density_cutoff: 0

# Population cutoff
# Adminunit below this cutoff are eliminated for demand od_point
# If set to 0, deactivate this filter
pop_cutoff: 0

# Local demand cutoff
# When generating the households, if, at an OD point, an household has a demand below this value for one sector
# then this demand is ignored
# unit is that of monetary_units_inputed
# If set to 0, deactivate this filter
local_demand_cutoff: 0

# Which countries to include. Possible values:
# - 'all': all the districts are kept
# - list of countries
countries_to_include: "all"


# If True, the service firms (utility, transport, service) are modeled as the nonservice firms
# Their output will not use the transport network, but their inputs, if it comes from nonservice firms, will.
# If False, then two firms per service sector will be modeled for the whole country
# Neither their input nor output will use the transport network.
explicit_service_firm: True

# Duration target for the firm inventory
# When firm holds the inventories meeting this target, then the firms can keep meeting their pre-disruption
# production targets without ordering more inputs for the specified number of time steps.
# if definition = per_input_type, then give values of sector type
# if definition = inputed, then give a filepath
inventory_duration_targets:
  definition: per_input_type  # inputed
  values:
    default: 30
    utility: 3
    agriculture: 15
    manufacturing: 30
    service: 90
    trade: 30
    transport: 5
  unit: day

# Determines the speed at which firms try to reach their inventory duration target
# See Henriet, Hallegatte, and Tabourier 2011 for the formulas
# A too large value leads to dynamic instabilities, called Bullwhip effect
inventory_restoration_time: 4

# In case firms have more than one supplier for an input, determines whether to adapt the order to each supplier 
# based on how well they covered the previous order
adaptive_supplier_weight: False

# Determines the initial utilization rate of firms
# It is used to determine, based on the production of the input-output equilibrium, the production capacity of the firms
# E.g., if a firm produces 80 and has a 0.8 utilization rate, then its production capacity is set to 100.
# It applies uniformly to all firms.
utilization_rate: 0.8

# Determines which inputs will be kept in the firms' Leontief production function
# It sets to 0 the elements of the technical coefficient IO matrix that are below this cutoff
# E.g., if sector A uses 0.3 input of sector B and 0.005 input of sector C to produce 1 unit of output (data from
# the technical coefficient matrix), then, with a io_cutoff of 0.01, firms for sector A will only source inputs from
# sector B firms.
io_cutoff: 0.01

# Determines the way firms ration their clients if they cannot meet all demand
# Possible values are:
# - 'equal': all clients are equally rationned in proportion of their order
# - 'household_first': if the firm sells to both households and other firms, then households are served first
rationing_mode: "equal"

# Set the number of supplier that firms have for each type of input
# Possible values are:
# - 1: each firms select one supplier per input
# - 2: each firms select two suppliers per input
# - a decimal number between 1 and 2: firms choose either one or two suppliers per input, such that, in average
# the average number of supplier per sector is equal to the specified number.
nb_suppliers_per_input: 1

# Determines how important it is for firms to choose suppliers close to them
# The chance of choosing a firm as a supplier for an input, depends on its importance score and on its distance
# It is (importance) / (distance)^w where w is the weight_localization parameter
weight_localization_firm: 1

# Determines how important it is for households to choose suppliers close to them
# The chance of choosing a firm as a supplier for an input, depends on its distance
# It is 1 / (distance)^w where w is the weight_localization parameter
weight_localization_household: 4


# The type of simulation to run
simulation_type: initial_state

# Nb of Monte Carlo simulations to run
mc_repetitions: 0

# Monte Carlo caching configuration - specifies which model components to reuse between iterations
mc_caching:
  transport_network: true  # Reuse transport network (expensive to rebuild)
  agents: true            # Reuse agents (firms, households, countries)
  sc_network: false       # Regenerate supply chain network (allows stochastic variation)
  logistic_routes: false  # Regenerate logistic routes (allows stochastic variation)

# Sensitivity analysis parameters - specify parameter ranges for disruption-sensitivity simulation
sensitivity: null

# Determines the disruptive events to model TODO elaborate
disruptions: null

# What time interval does a time step represents
# Possible values are: 'day', 'week', 'month', 'year'
time_resolution: 'week'

# Defines the criticality loop
criticality:
    edges: []
    duration: 1


# Value of the household extra spending and consumption loss under which we stop the simulation
# Units is the monetary_units_in_model
epsilon_stop_condition: 1e-3

# Characteristic of the transport edges that the path chosen by firms to
# deliver to their to clients should minimized
# Possible values are:
# - time_cost
# - cost_per_ton
route_optimization_weight: "cost_per_ton"

# If the relative increase in transport cost is larger than this value, then the firm chooses not to deliver
# the product
price_increase_threshold: 2

# If False, firms try to restore their initial (=equilibrium) inventories
# If True, they reassess their inventory targets based on current orders
adaptive_inventories: False

# Transport capacity constraint behavior
# Options:
#   "off" or false: No capacity constraints (unlimited capacity)
#   "gradual": Gradual cost scaling based on utilization (1x → 10x cost multiplier)  
#   "binary": Traditional on/off penalty when capacity exceeded (1e10x cost penalty)
capacity_constraint: "off"




# Define how much built capital firms have given their level of output
capital_to_value_added_ratio: 3
